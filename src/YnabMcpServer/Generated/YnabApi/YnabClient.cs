//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;
using System.Text.Json.Serialization;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace YnabMcpServer.Generated.YnabApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IClient : IYnabHttpClient
    {
        /// <summary>
        /// User info
        /// </summary>
        /// <remarks>
        /// Returns authenticated user information
        /// </remarks>
        /// <returns>The user info</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserResponse> GetUserAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// User info
        /// </summary>
        /// <remarks>
        /// Returns authenticated user information
        /// </remarks>
        /// <returns>The user info</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserResponse> GetUserAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List budgets
        /// </summary>
        /// <remarks>
        /// Returns budgets list with summary information
        /// </remarks>
        /// <param name="include_accounts">Whether to include the list of budget accounts</param>
        /// <returns>The list of budgets</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetSummaryResponse> GetBudgetsAsync(bool? include_accounts);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List budgets
        /// </summary>
        /// <remarks>
        /// Returns budgets list with summary information
        /// </remarks>
        /// <param name="include_accounts">Whether to include the list of budget accounts</param>
        /// <returns>The list of budgets</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetSummaryResponse> GetBudgetsAsync(bool? include_accounts, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Single budget
        /// </summary>
        /// <remarks>
        /// Returns a single budget with all related entities.  This resource is effectively a full budget export.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The requested budget</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetDetailResponse> GetBudgetByIdAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single budget
        /// </summary>
        /// <remarks>
        /// Returns a single budget with all related entities.  This resource is effectively a full budget export.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The requested budget</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetDetailResponse> GetBudgetByIdAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Budget Settings
        /// </summary>
        /// <remarks>
        /// Returns settings for a budget
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The requested budget settings</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetSettingsResponse> GetBudgetSettingsByIdAsync(string budget_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Budget Settings
        /// </summary>
        /// <remarks>
        /// Returns settings for a budget
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The requested budget settings</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetSettingsResponse> GetBudgetSettingsByIdAsync(string budget_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Account list
        /// </summary>
        /// <remarks>
        /// Returns all accounts
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested accounts</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountsResponse> GetAccountsAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account list
        /// </summary>
        /// <remarks>
        /// Returns all accounts
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested accounts</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountsResponse> GetAccountsAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new account
        /// </summary>
        /// <remarks>
        /// Creates a new account
        /// </remarks>
        /// <param name="budget_id">The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget)</param>
        /// <param name="body">The account to create.</param>
        /// <returns>The account was successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountResponse> CreateAccountAsync(string budget_id, PostAccountWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new account
        /// </summary>
        /// <remarks>
        /// Creates a new account
        /// </remarks>
        /// <param name="budget_id">The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget)</param>
        /// <param name="body">The account to create.</param>
        /// <returns>The account was successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountResponse> CreateAccountAsync(string budget_id, PostAccountWrapper body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Single account
        /// </summary>
        /// <remarks>
        /// Returns a single account
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="account_id">The id of the account</param>
        /// <returns>The requested account</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountResponse> GetAccountByIdAsync(string budget_id, System.Guid account_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single account
        /// </summary>
        /// <remarks>
        /// Returns a single account
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="account_id">The id of the account</param>
        /// <returns>The requested account</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountResponse> GetAccountByIdAsync(string budget_id, System.Guid account_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The categories grouped by category group</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoriesResponse> GetCategoriesAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The categories grouped by category group</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoriesResponse> GetCategoriesAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Single category
        /// </summary>
        /// <remarks>
        /// Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested category</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryResponse> GetCategoryByIdAsync(string budget_id, string category_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single category
        /// </summary>
        /// <remarks>
        /// Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested category</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryResponse> GetCategoryByIdAsync(string budget_id, string category_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a category
        /// </summary>
        /// <remarks>
        /// Update a category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The category to update</param>
        /// <returns>The category was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaveCategoryResponse> UpdateCategoryAsync(string budget_id, string category_id, PatchCategoryWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a category
        /// </summary>
        /// <remarks>
        /// Update a category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The category to update</param>
        /// <returns>The category was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaveCategoryResponse> UpdateCategoryAsync(string budget_id, string category_id, PatchCategoryWrapper body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Single category for a specific budget month
        /// </summary>
        /// <remarks>
        /// Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested month category</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryResponse> GetMonthCategoryByIdAsync(string budget_id, System.DateTimeOffset month, string category_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single category for a specific budget month
        /// </summary>
        /// <remarks>
        /// Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested month category</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryResponse> GetMonthCategoryByIdAsync(string budget_id, System.DateTimeOffset month, string category_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a category for a specific month
        /// </summary>
        /// <remarks>
        /// Update a category for a specific month.  Only `budgeted` amount can be updated.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.</param>
        /// <returns>The month category was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaveCategoryResponse> UpdateMonthCategoryAsync(string budget_id, System.DateTimeOffset month, string category_id, PatchMonthCategoryWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a category for a specific month
        /// </summary>
        /// <remarks>
        /// Update a category for a specific month.  Only `budgeted` amount can be updated.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.</param>
        /// <returns>The month category was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaveCategoryResponse> UpdateMonthCategoryAsync(string budget_id, System.DateTimeOffset month, string category_id, PatchMonthCategoryWrapper body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List payees
        /// </summary>
        /// <remarks>
        /// Returns all payees
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The requested list of payees</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeesResponse> GetPayeesAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List payees
        /// </summary>
        /// <remarks>
        /// Returns all payees
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The requested list of payees</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeesResponse> GetPayeesAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Single payee
        /// </summary>
        /// <remarks>
        /// Returns a single payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <returns>The requested payee</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeResponse> GetPayeeByIdAsync(string budget_id, string payee_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single payee
        /// </summary>
        /// <remarks>
        /// Returns a single payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <returns>The requested payee</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeResponse> GetPayeeByIdAsync(string budget_id, string payee_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a payee
        /// </summary>
        /// <remarks>
        /// Update a payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="body">The payee to update</param>
        /// <returns>The payee was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SavePayeeResponse> UpdatePayeeAsync(string budget_id, string payee_id, PatchPayeeWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a payee
        /// </summary>
        /// <remarks>
        /// Update a payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="body">The payee to update</param>
        /// <returns>The payee was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SavePayeeResponse> UpdatePayeeAsync(string budget_id, string payee_id, PatchPayeeWrapper body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List payee locations
        /// </summary>
        /// <remarks>
        /// Returns all payee locations
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The list of payee locations</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsAsync(string budget_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List payee locations
        /// </summary>
        /// <remarks>
        /// Returns all payee locations
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The list of payee locations</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsAsync(string budget_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Single payee location
        /// </summary>
        /// <remarks>
        /// Returns a single payee location
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_location_id">id of payee location</param>
        /// <returns>The payee location</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeLocationResponse> GetPayeeLocationByIdAsync(string budget_id, string payee_location_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single payee location
        /// </summary>
        /// <remarks>
        /// Returns a single payee location
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_location_id">id of payee location</param>
        /// <returns>The payee location</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeLocationResponse> GetPayeeLocationByIdAsync(string budget_id, string payee_location_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List locations for a payee
        /// </summary>
        /// <remarks>
        /// Returns all payee locations for a specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">id of payee</param>
        /// <returns>The list of requested payee locations</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsByPayeeAsync(string budget_id, string payee_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List locations for a payee
        /// </summary>
        /// <remarks>
        /// Returns all payee locations for a specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">id of payee</param>
        /// <returns>The list of requested payee locations</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsByPayeeAsync(string budget_id, string payee_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List budget months
        /// </summary>
        /// <remarks>
        /// Returns all budget months
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of budget months</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MonthSummariesResponse> GetBudgetMonthsAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List budget months
        /// </summary>
        /// <remarks>
        /// Returns all budget months
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of budget months</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MonthSummariesResponse> GetBudgetMonthsAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Single budget month
        /// </summary>
        /// <remarks>
        /// Returns a single budget month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <returns>The budget month detail</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MonthDetailResponse> GetBudgetMonthAsync(string budget_id, System.DateTimeOffset month);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single budget month
        /// </summary>
        /// <remarks>
        /// Returns a single budget month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <returns>The budget month detail</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MonthDetailResponse> GetBudgetMonthAsync(string budget_id, System.DateTimeOffset month, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List transactions
        /// </summary>
        /// <remarks>
        /// Returns budget transactions, excluding any pending transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsAsync(string budget_id, System.DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List transactions
        /// </summary>
        /// <remarks>
        /// Returns budget transactions, excluding any pending transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsAsync(string budget_id, System.DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a single transaction or multiple transactions
        /// </summary>
        /// <remarks>
        /// Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions (transactions with a future date) cannot be created on this endpoint.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.</param>
        /// <returns>The transaction or transactions were successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaveTransactionsResponse> CreateTransactionAsync(string budget_id, PostTransactionsWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a single transaction or multiple transactions
        /// </summary>
        /// <remarks>
        /// Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions (transactions with a future date) cannot be created on this endpoint.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.</param>
        /// <returns>The transaction or transactions were successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaveTransactionsResponse> CreateTransactionAsync(string budget_id, PostTransactionsWrapper body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update multiple transactions
        /// </summary>
        /// <remarks>
        /// Updates multiple transactions, by `id` or `import_id`.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by its `import_id`. If an `id` is specified, it will always be used for lookup.  You should not specify both `id` and `import_id`.  Updating an `import_id` on an existing transaction is not allowed; if an `import_id` is specified, it will only be used to lookup the transaction.</param>
        /// <returns>The transactions were successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaveTransactionsResponse> UpdateTransactionsAsync(string budget_id, PatchTransactionsWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update multiple transactions
        /// </summary>
        /// <remarks>
        /// Updates multiple transactions, by `id` or `import_id`.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by its `import_id`. If an `id` is specified, it will always be used for lookup.  You should not specify both `id` and `import_id`.  Updating an `import_id` on an existing transaction is not allowed; if an `import_id` is specified, it will only be used to lookup the transaction.</param>
        /// <returns>The transactions were successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaveTransactionsResponse> UpdateTransactionsAsync(string budget_id, PatchTransactionsWrapper body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Import transactions
        /// </summary>
        /// <remarks>
        /// Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking "Import" on each account in the web application or tapping the "New Transactions" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The request was successful but there were no transactions to import</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionsImportResponse> ImportTransactionsAsync(string budget_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import transactions
        /// </summary>
        /// <remarks>
        /// Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking "Import" on each account in the web application or tapping the "New Transactions" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The request was successful but there were no transactions to import</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionsImportResponse> ImportTransactionsAsync(string budget_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Single transaction
        /// </summary>
        /// <remarks>
        /// Returns a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The requested transaction</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionResponse> GetTransactionByIdAsync(string budget_id, string transaction_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single transaction
        /// </summary>
        /// <remarks>
        /// Returns a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The requested transaction</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionResponse> GetTransactionByIdAsync(string budget_id, string transaction_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates an existing transaction
        /// </summary>
        /// <remarks>
        /// Updates a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <param name="body">The transaction to update</param>
        /// <returns>The transaction was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionResponse> UpdateTransactionAsync(string budget_id, string transaction_id, PutTransactionWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an existing transaction
        /// </summary>
        /// <remarks>
        /// Updates a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <param name="body">The transaction to update</param>
        /// <returns>The transaction was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionResponse> UpdateTransactionAsync(string budget_id, string transaction_id, PutTransactionWrapper body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes an existing transaction
        /// </summary>
        /// <remarks>
        /// Deletes a transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The transaction was successfully deleted</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionResponse> DeleteTransactionAsync(string budget_id, string transaction_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an existing transaction
        /// </summary>
        /// <remarks>
        /// Deletes a transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The transaction was successfully deleted</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionResponse> DeleteTransactionAsync(string budget_id, string transaction_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List account transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified account, excluding any pending transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="account_id">The id of the account</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsByAccountAsync(string budget_id, string account_id, System.DateTimeOffset? since_date, Type2? type, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List account transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified account, excluding any pending transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="account_id">The id of the account</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsByAccountAsync(string budget_id, string account_id, System.DateTimeOffset? since_date, Type2? type, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List category transactions, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByCategoryAsync(string budget_id, string category_id, System.DateTimeOffset? since_date, Type3? type, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List category transactions, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByCategoryAsync(string budget_id, string category_id, System.DateTimeOffset? since_date, Type3? type, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List payee transactions, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByPayeeAsync(string budget_id, string payee_id, System.DateTimeOffset? since_date, Type4? type, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List payee transactions, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByPayeeAsync(string budget_id, string payee_id, System.DateTimeOffset? since_date, Type4? type, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List transactions in month, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByMonthAsync(string budget_id, string month, System.DateTimeOffset? since_date, Type5? type, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List transactions in month, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByMonthAsync(string budget_id, string month, System.DateTimeOffset? since_date, Type5? type, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List scheduled transactions
        /// </summary>
        /// <remarks>
        /// Returns all scheduled transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested scheduled transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScheduledTransactionsResponse> GetScheduledTransactionsAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List scheduled transactions
        /// </summary>
        /// <remarks>
        /// Returns all scheduled transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested scheduled transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScheduledTransactionsResponse> GetScheduledTransactionsAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a single scheduled transaction
        /// </summary>
        /// <remarks>
        /// Creates a single scheduled transaction (a transaction with a future date).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The scheduled transaction to create</param>
        /// <returns>The scheduled transaction was successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScheduledTransactionResponse> CreateScheduledTransactionAsync(string budget_id, PostScheduledTransactionWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a single scheduled transaction
        /// </summary>
        /// <remarks>
        /// Creates a single scheduled transaction (a transaction with a future date).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The scheduled transaction to create</param>
        /// <returns>The scheduled transaction was successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScheduledTransactionResponse> CreateScheduledTransactionAsync(string budget_id, PostScheduledTransactionWrapper body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Single scheduled transaction
        /// </summary>
        /// <remarks>
        /// Returns a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <returns>The requested Scheduled Transaction</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScheduledTransactionResponse> GetScheduledTransactionByIdAsync(string budget_id, string scheduled_transaction_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single scheduled transaction
        /// </summary>
        /// <remarks>
        /// Returns a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <returns>The requested Scheduled Transaction</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScheduledTransactionResponse> GetScheduledTransactionByIdAsync(string budget_id, string scheduled_transaction_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates an existing scheduled transaction
        /// </summary>
        /// <remarks>
        /// Updates a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <param name="body">The scheduled transaction to update</param>
        /// <returns>The scheduled transaction was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScheduledTransactionResponse> UpdateScheduledTransactionAsync(string budget_id, string scheduled_transaction_id, PutScheduledTransactionWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an existing scheduled transaction
        /// </summary>
        /// <remarks>
        /// Updates a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <param name="body">The scheduled transaction to update</param>
        /// <returns>The scheduled transaction was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScheduledTransactionResponse> UpdateScheduledTransactionAsync(string budget_id, string scheduled_transaction_id, PutScheduledTransactionWrapper body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes an existing scheduled transaction
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <returns>The scheduled transaction was successfully deleted</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScheduledTransactionResponse> DeleteScheduledTransactionAsync(string budget_id, string scheduled_transaction_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an existing scheduled transaction
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <returns>The scheduled transaction was successfully deleted</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScheduledTransactionResponse> DeleteScheduledTransactionAsync(string budget_id, string scheduled_transaction_id, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client : YnabHttpClientBase, IClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public Client(YnabApiConfiguration configuration, System.Net.Http.HttpClient httpClient) : base(configuration)
        {
            BaseUrl = "https://api.ynab.com/v1";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            [System.Diagnostics.CodeAnalysis.MemberNotNull(nameof(_baseUrl))]
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// User info
        /// </summary>
        /// <remarks>
        /// Returns authenticated user information
        /// </remarks>
        /// <returns>The user info</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserResponse> GetUserAsync()
        {
            return GetUserAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// User info
        /// </summary>
        /// <remarks>
        /// Returns authenticated user information
        /// </remarks>
        /// <returns>The user info</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserResponse> GetUserAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "user"
                    urlBuilder_.Append("user");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List budgets
        /// </summary>
        /// <remarks>
        /// Returns budgets list with summary information
        /// </remarks>
        /// <param name="include_accounts">Whether to include the list of budget accounts</param>
        /// <returns>The list of budgets</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BudgetSummaryResponse> GetBudgetsAsync(bool? include_accounts)
        {
            return GetBudgetsAsync(include_accounts, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List budgets
        /// </summary>
        /// <remarks>
        /// Returns budgets list with summary information
        /// </remarks>
        /// <param name="include_accounts">Whether to include the list of budget accounts</param>
        /// <returns>The list of budgets</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BudgetSummaryResponse> GetBudgetsAsync(bool? include_accounts, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets"
                    urlBuilder_.Append("budgets");
                    urlBuilder_.Append('?');
                    if (include_accounts != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_accounts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_accounts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BudgetSummaryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No budgets were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Single budget
        /// </summary>
        /// <remarks>
        /// Returns a single budget with all related entities.  This resource is effectively a full budget export.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The requested budget</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BudgetDetailResponse> GetBudgetByIdAsync(string budget_id, long? last_knowledge_of_server)
        {
            return GetBudgetByIdAsync(budget_id, last_knowledge_of_server, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single budget
        /// </summary>
        /// <remarks>
        /// Returns a single budget with all related entities.  This resource is effectively a full budget export.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The requested budget</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BudgetDetailResponse> GetBudgetByIdAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (last_knowledge_of_server != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_knowledge_of_server")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_knowledge_of_server, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BudgetDetailResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The specified budget was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Budget Settings
        /// </summary>
        /// <remarks>
        /// Returns settings for a budget
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The requested budget settings</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BudgetSettingsResponse> GetBudgetSettingsByIdAsync(string budget_id)
        {
            return GetBudgetSettingsByIdAsync(budget_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Budget Settings
        /// </summary>
        /// <remarks>
        /// Returns settings for a budget
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The requested budget settings</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BudgetSettingsResponse> GetBudgetSettingsByIdAsync(string budget_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/settings"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/settings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BudgetSettingsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The specified Budget was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Account list
        /// </summary>
        /// <remarks>
        /// Returns all accounts
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested accounts</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountsResponse> GetAccountsAsync(string budget_id, long? last_knowledge_of_server)
        {
            return GetAccountsAsync(budget_id, last_knowledge_of_server, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account list
        /// </summary>
        /// <remarks>
        /// Returns all accounts
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested accounts</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountsResponse> GetAccountsAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/accounts"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts");
                    urlBuilder_.Append('?');
                    if (last_knowledge_of_server != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_knowledge_of_server")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_knowledge_of_server, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No accounts were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new account
        /// </summary>
        /// <remarks>
        /// Creates a new account
        /// </remarks>
        /// <param name="budget_id">The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget)</param>
        /// <param name="body">The account to create.</param>
        /// <returns>The account was successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountResponse> CreateAccountAsync(string budget_id, PostAccountWrapper body)
        {
            return CreateAccountAsync(budget_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new account
        /// </summary>
        /// <remarks>
        /// Creates a new account
        /// </remarks>
        /// <param name="budget_id">The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget)</param>
        /// <param name="body">The account to create.</param>
        /// <returns>The account was successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountResponse> CreateAccountAsync(string budget_id, PostAccountWrapper body, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/accounts"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The request could not be understood due to malformed syntax or validation error(s).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Single account
        /// </summary>
        /// <remarks>
        /// Returns a single account
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="account_id">The id of the account</param>
        /// <returns>The requested account</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountResponse> GetAccountByIdAsync(string budget_id, System.Guid account_id)
        {
            return GetAccountByIdAsync(budget_id, account_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single account
        /// </summary>
        /// <remarks>
        /// Returns a single account
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="account_id">The id of the account</param>
        /// <returns>The requested account</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountResponse> GetAccountByIdAsync(string budget_id, System.Guid account_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (account_id == null)
                throw new System.ArgumentNullException("account_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/accounts/{account_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(account_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The requested account was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The categories grouped by category group</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CategoriesResponse> GetCategoriesAsync(string budget_id, long? last_knowledge_of_server)
        {
            return GetCategoriesAsync(budget_id, last_knowledge_of_server, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The categories grouped by category group</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CategoriesResponse> GetCategoriesAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/categories"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/categories");
                    urlBuilder_.Append('?');
                    if (last_knowledge_of_server != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_knowledge_of_server")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_knowledge_of_server, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoriesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No categories were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Single category
        /// </summary>
        /// <remarks>
        /// Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested category</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CategoryResponse> GetCategoryByIdAsync(string budget_id, string category_id)
        {
            return GetCategoryByIdAsync(budget_id, category_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single category
        /// </summary>
        /// <remarks>
        /// Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested category</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CategoryResponse> GetCategoryByIdAsync(string budget_id, string category_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (category_id == null)
                throw new System.ArgumentNullException("category_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/categories/{category_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/categories/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(category_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The category not was found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a category
        /// </summary>
        /// <remarks>
        /// Update a category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The category to update</param>
        /// <returns>The category was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SaveCategoryResponse> UpdateCategoryAsync(string budget_id, string category_id, PatchCategoryWrapper body)
        {
            return UpdateCategoryAsync(budget_id, category_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a category
        /// </summary>
        /// <remarks>
        /// Update a category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The category to update</param>
        /// <returns>The category was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaveCategoryResponse> UpdateCategoryAsync(string budget_id, string category_id, PatchCategoryWrapper body, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (category_id == null)
                throw new System.ArgumentNullException("category_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/categories/{category_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/categories/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(category_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaveCategoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The request could not be understood due to malformed syntax or validation error(s)", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Single category for a specific budget month
        /// </summary>
        /// <remarks>
        /// Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested month category</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CategoryResponse> GetMonthCategoryByIdAsync(string budget_id, System.DateTimeOffset month, string category_id)
        {
            return GetMonthCategoryByIdAsync(budget_id, month, category_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single category for a specific budget month
        /// </summary>
        /// <remarks>
        /// Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested month category</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CategoryResponse> GetMonthCategoryByIdAsync(string budget_id, System.DateTimeOffset month, string category_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (month == null)
                throw new System.ArgumentNullException("month");

            if (category_id == null)
                throw new System.ArgumentNullException("category_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/months/{month}/categories/{category_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/months/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(month.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/categories/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(category_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The month category was not was found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a category for a specific month
        /// </summary>
        /// <remarks>
        /// Update a category for a specific month.  Only `budgeted` amount can be updated.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.</param>
        /// <returns>The month category was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SaveCategoryResponse> UpdateMonthCategoryAsync(string budget_id, System.DateTimeOffset month, string category_id, PatchMonthCategoryWrapper body)
        {
            return UpdateMonthCategoryAsync(budget_id, month, category_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a category for a specific month
        /// </summary>
        /// <remarks>
        /// Update a category for a specific month.  Only `budgeted` amount can be updated.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.</param>
        /// <returns>The month category was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaveCategoryResponse> UpdateMonthCategoryAsync(string budget_id, System.DateTimeOffset month, string category_id, PatchMonthCategoryWrapper body, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (month == null)
                throw new System.ArgumentNullException("month");

            if (category_id == null)
                throw new System.ArgumentNullException("category_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/months/{month}/categories/{category_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/months/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(month.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/categories/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(category_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaveCategoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The request could not be understood due to malformed syntax or validation error(s)", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List payees
        /// </summary>
        /// <remarks>
        /// Returns all payees
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The requested list of payees</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayeesResponse> GetPayeesAsync(string budget_id, long? last_knowledge_of_server)
        {
            return GetPayeesAsync(budget_id, last_knowledge_of_server, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List payees
        /// </summary>
        /// <remarks>
        /// Returns all payees
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The requested list of payees</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayeesResponse> GetPayeesAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/payees"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payees");
                    urlBuilder_.Append('?');
                    if (last_knowledge_of_server != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_knowledge_of_server")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_knowledge_of_server, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayeesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No payees were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Single payee
        /// </summary>
        /// <remarks>
        /// Returns a single payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <returns>The requested payee</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayeeResponse> GetPayeeByIdAsync(string budget_id, string payee_id)
        {
            return GetPayeeByIdAsync(budget_id, payee_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single payee
        /// </summary>
        /// <remarks>
        /// Returns a single payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <returns>The requested payee</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayeeResponse> GetPayeeByIdAsync(string budget_id, string payee_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (payee_id == null)
                throw new System.ArgumentNullException("payee_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/payees/{payee_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(payee_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayeeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The payee was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a payee
        /// </summary>
        /// <remarks>
        /// Update a payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="body">The payee to update</param>
        /// <returns>The payee was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SavePayeeResponse> UpdatePayeeAsync(string budget_id, string payee_id, PatchPayeeWrapper body)
        {
            return UpdatePayeeAsync(budget_id, payee_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a payee
        /// </summary>
        /// <remarks>
        /// Update a payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="body">The payee to update</param>
        /// <returns>The payee was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SavePayeeResponse> UpdatePayeeAsync(string budget_id, string payee_id, PatchPayeeWrapper body, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (payee_id == null)
                throw new System.ArgumentNullException("payee_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/payees/{payee_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(payee_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SavePayeeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The request could not be understood due to malformed syntax or validation error(s)", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List payee locations
        /// </summary>
        /// <remarks>
        /// Returns all payee locations
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The list of payee locations</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsAsync(string budget_id)
        {
            return GetPayeeLocationsAsync(budget_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List payee locations
        /// </summary>
        /// <remarks>
        /// Returns all payee locations
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The list of payee locations</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsAsync(string budget_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/payee_locations"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payee_locations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayeeLocationsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No payees locations were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Single payee location
        /// </summary>
        /// <remarks>
        /// Returns a single payee location
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_location_id">id of payee location</param>
        /// <returns>The payee location</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayeeLocationResponse> GetPayeeLocationByIdAsync(string budget_id, string payee_location_id)
        {
            return GetPayeeLocationByIdAsync(budget_id, payee_location_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single payee location
        /// </summary>
        /// <remarks>
        /// Returns a single payee location
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_location_id">id of payee location</param>
        /// <returns>The payee location</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayeeLocationResponse> GetPayeeLocationByIdAsync(string budget_id, string payee_location_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (payee_location_id == null)
                throw new System.ArgumentNullException("payee_location_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/payee_locations/{payee_location_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payee_locations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(payee_location_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayeeLocationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The payee location was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List locations for a payee
        /// </summary>
        /// <remarks>
        /// Returns all payee locations for a specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">id of payee</param>
        /// <returns>The list of requested payee locations</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsByPayeeAsync(string budget_id, string payee_id)
        {
            return GetPayeeLocationsByPayeeAsync(budget_id, payee_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List locations for a payee
        /// </summary>
        /// <remarks>
        /// Returns all payee locations for a specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">id of payee</param>
        /// <returns>The list of requested payee locations</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsByPayeeAsync(string budget_id, string payee_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (payee_id == null)
                throw new System.ArgumentNullException("payee_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/payees/{payee_id}/payee_locations"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(payee_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payee_locations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayeeLocationsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No payees locations were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List budget months
        /// </summary>
        /// <remarks>
        /// Returns all budget months
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of budget months</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MonthSummariesResponse> GetBudgetMonthsAsync(string budget_id, long? last_knowledge_of_server)
        {
            return GetBudgetMonthsAsync(budget_id, last_knowledge_of_server, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List budget months
        /// </summary>
        /// <remarks>
        /// Returns all budget months
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of budget months</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MonthSummariesResponse> GetBudgetMonthsAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/months"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/months");
                    urlBuilder_.Append('?');
                    if (last_knowledge_of_server != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_knowledge_of_server")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_knowledge_of_server, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MonthSummariesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No budget months were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Single budget month
        /// </summary>
        /// <remarks>
        /// Returns a single budget month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <returns>The budget month detail</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MonthDetailResponse> GetBudgetMonthAsync(string budget_id, System.DateTimeOffset month)
        {
            return GetBudgetMonthAsync(budget_id, month, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single budget month
        /// </summary>
        /// <remarks>
        /// Returns a single budget month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <returns>The budget month detail</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MonthDetailResponse> GetBudgetMonthAsync(string budget_id, System.DateTimeOffset month, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (month == null)
                throw new System.ArgumentNullException("month");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/months/{month}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/months/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(month.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MonthDetailResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The budget month was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List transactions
        /// </summary>
        /// <remarks>
        /// Returns budget transactions, excluding any pending transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsAsync(string budget_id, System.DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server)
        {
            return GetTransactionsAsync(budget_id, since_date, type, last_knowledge_of_server, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List transactions
        /// </summary>
        /// <remarks>
        /// Returns budget transactions, excluding any pending transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsAsync(string budget_id, System.DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/transactions"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");
                    urlBuilder_.Append('?');
                    if (since_date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("since_date")).Append('=').Append(System.Uri.EscapeDataString(since_date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_knowledge_of_server != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_knowledge_of_server")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_knowledge_of_server, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransactionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No transactions were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a single transaction or multiple transactions
        /// </summary>
        /// <remarks>
        /// Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions (transactions with a future date) cannot be created on this endpoint.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.</param>
        /// <returns>The transaction or transactions were successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SaveTransactionsResponse> CreateTransactionAsync(string budget_id, PostTransactionsWrapper body)
        {
            return CreateTransactionAsync(budget_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a single transaction or multiple transactions
        /// </summary>
        /// <remarks>
        /// Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions (transactions with a future date) cannot be created on this endpoint.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.</param>
        /// <returns>The transaction or transactions were successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaveTransactionsResponse> CreateTransactionAsync(string budget_id, PostTransactionsWrapper body, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/transactions"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaveTransactionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The request could not be understood due to malformed syntax or validation error(s).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("A transaction on the same account with the same `import_id` already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update multiple transactions
        /// </summary>
        /// <remarks>
        /// Updates multiple transactions, by `id` or `import_id`.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by its `import_id`. If an `id` is specified, it will always be used for lookup.  You should not specify both `id` and `import_id`.  Updating an `import_id` on an existing transaction is not allowed; if an `import_id` is specified, it will only be used to lookup the transaction.</param>
        /// <returns>The transactions were successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SaveTransactionsResponse> UpdateTransactionsAsync(string budget_id, PatchTransactionsWrapper body)
        {
            return UpdateTransactionsAsync(budget_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update multiple transactions
        /// </summary>
        /// <remarks>
        /// Updates multiple transactions, by `id` or `import_id`.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by its `import_id`. If an `id` is specified, it will always be used for lookup.  You should not specify both `id` and `import_id`.  Updating an `import_id` on an existing transaction is not allowed; if an `import_id` is specified, it will only be used to lookup the transaction.</param>
        /// <returns>The transactions were successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaveTransactionsResponse> UpdateTransactionsAsync(string budget_id, PatchTransactionsWrapper body, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/transactions"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 209)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaveTransactionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The request could not be understood due to malformed syntax or validation error(s).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Import transactions
        /// </summary>
        /// <remarks>
        /// Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking "Import" on each account in the web application or tapping the "New Transactions" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The request was successful but there were no transactions to import</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TransactionsImportResponse> ImportTransactionsAsync(string budget_id)
        {
            return ImportTransactionsAsync(budget_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import transactions
        /// </summary>
        /// <remarks>
        /// Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking "Import" on each account in the web application or tapping the "New Transactions" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <returns>The request was successful but there were no transactions to import</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransactionsImportResponse> ImportTransactionsAsync(string budget_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/transactions/import"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions/import");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransactionsImportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransactionsImportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The request could not be understood due to malformed syntax or validation error(s)", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Single transaction
        /// </summary>
        /// <remarks>
        /// Returns a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The requested transaction</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TransactionResponse> GetTransactionByIdAsync(string budget_id, string transaction_id)
        {
            return GetTransactionByIdAsync(budget_id, transaction_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single transaction
        /// </summary>
        /// <remarks>
        /// Returns a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The requested transaction</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransactionResponse> GetTransactionByIdAsync(string budget_id, string transaction_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (transaction_id == null)
                throw new System.ArgumentNullException("transaction_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/transactions/{transaction_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(transaction_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The transaction was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates an existing transaction
        /// </summary>
        /// <remarks>
        /// Updates a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <param name="body">The transaction to update</param>
        /// <returns>The transaction was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TransactionResponse> UpdateTransactionAsync(string budget_id, string transaction_id, PutTransactionWrapper body)
        {
            return UpdateTransactionAsync(budget_id, transaction_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an existing transaction
        /// </summary>
        /// <remarks>
        /// Updates a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <param name="body">The transaction to update</param>
        /// <returns>The transaction was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransactionResponse> UpdateTransactionAsync(string budget_id, string transaction_id, PutTransactionWrapper body, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (transaction_id == null)
                throw new System.ArgumentNullException("transaction_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/transactions/{transaction_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(transaction_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The request could not be understood due to malformed syntax or validation error(s)", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an existing transaction
        /// </summary>
        /// <remarks>
        /// Deletes a transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The transaction was successfully deleted</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TransactionResponse> DeleteTransactionAsync(string budget_id, string transaction_id)
        {
            return DeleteTransactionAsync(budget_id, transaction_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an existing transaction
        /// </summary>
        /// <remarks>
        /// Deletes a transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The transaction was successfully deleted</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransactionResponse> DeleteTransactionAsync(string budget_id, string transaction_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (transaction_id == null)
                throw new System.ArgumentNullException("transaction_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/transactions/{transaction_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(transaction_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The transaction was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List account transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified account, excluding any pending transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="account_id">The id of the account</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsByAccountAsync(string budget_id, string account_id, System.DateTimeOffset? since_date, Type2? type, long? last_knowledge_of_server)
        {
            return GetTransactionsByAccountAsync(budget_id, account_id, since_date, type, last_knowledge_of_server, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List account transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified account, excluding any pending transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="account_id">The id of the account</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsByAccountAsync(string budget_id, string account_id, System.DateTimeOffset? since_date, Type2? type, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (account_id == null)
                throw new System.ArgumentNullException("account_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/accounts/{account_id}/transactions"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(account_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");
                    urlBuilder_.Append('?');
                    if (since_date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("since_date")).Append('=').Append(System.Uri.EscapeDataString(since_date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_knowledge_of_server != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_knowledge_of_server")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_knowledge_of_server, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransactionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No transactions were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List category transactions, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByCategoryAsync(string budget_id, string category_id, System.DateTimeOffset? since_date, Type3? type, long? last_knowledge_of_server)
        {
            return GetTransactionsByCategoryAsync(budget_id, category_id, since_date, type, last_knowledge_of_server, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List category transactions, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByCategoryAsync(string budget_id, string category_id, System.DateTimeOffset? since_date, Type3? type, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (category_id == null)
                throw new System.ArgumentNullException("category_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/categories/{category_id}/transactions"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/categories/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(category_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");
                    urlBuilder_.Append('?');
                    if (since_date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("since_date")).Append('=').Append(System.Uri.EscapeDataString(since_date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_knowledge_of_server != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_knowledge_of_server")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_knowledge_of_server, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HybridTransactionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No transactions were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List payee transactions, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByPayeeAsync(string budget_id, string payee_id, System.DateTimeOffset? since_date, Type4? type, long? last_knowledge_of_server)
        {
            return GetTransactionsByPayeeAsync(budget_id, payee_id, since_date, type, last_knowledge_of_server, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List payee transactions, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByPayeeAsync(string budget_id, string payee_id, System.DateTimeOffset? since_date, Type4? type, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (payee_id == null)
                throw new System.ArgumentNullException("payee_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/payees/{payee_id}/transactions"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(payee_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");
                    urlBuilder_.Append('?');
                    if (since_date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("since_date")).Append('=').Append(System.Uri.EscapeDataString(since_date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_knowledge_of_server != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_knowledge_of_server")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_knowledge_of_server, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HybridTransactionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No transactions were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List transactions in month, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByMonthAsync(string budget_id, string month, System.DateTimeOffset? since_date, Type5? type, long? last_knowledge_of_server)
        {
            return GetTransactionsByMonthAsync(budget_id, month, since_date, type, last_knowledge_of_server, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List transactions in month, excluding any pending transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a specified month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HybridTransactionsResponse> GetTransactionsByMonthAsync(string budget_id, string month, System.DateTimeOffset? since_date, Type5? type, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (month == null)
                throw new System.ArgumentNullException("month");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/months/{month}/transactions"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/months/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(month, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");
                    urlBuilder_.Append('?');
                    if (since_date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("since_date")).Append('=').Append(System.Uri.EscapeDataString(since_date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_knowledge_of_server != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_knowledge_of_server")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_knowledge_of_server, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HybridTransactionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No transactions were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List scheduled transactions
        /// </summary>
        /// <remarks>
        /// Returns all scheduled transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested scheduled transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ScheduledTransactionsResponse> GetScheduledTransactionsAsync(string budget_id, long? last_knowledge_of_server)
        {
            return GetScheduledTransactionsAsync(budget_id, last_knowledge_of_server, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List scheduled transactions
        /// </summary>
        /// <remarks>
        /// Returns all scheduled transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested scheduled transactions</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ScheduledTransactionsResponse> GetScheduledTransactionsAsync(string budget_id, long? last_knowledge_of_server, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/scheduled_transactions"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scheduled_transactions");
                    urlBuilder_.Append('?');
                    if (last_knowledge_of_server != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_knowledge_of_server")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_knowledge_of_server, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduledTransactionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("No scheduled transactions were found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a single scheduled transaction
        /// </summary>
        /// <remarks>
        /// Creates a single scheduled transaction (a transaction with a future date).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The scheduled transaction to create</param>
        /// <returns>The scheduled transaction was successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ScheduledTransactionResponse> CreateScheduledTransactionAsync(string budget_id, PostScheduledTransactionWrapper body)
        {
            return CreateScheduledTransactionAsync(budget_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a single scheduled transaction
        /// </summary>
        /// <remarks>
        /// Creates a single scheduled transaction (a transaction with a future date).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="body">The scheduled transaction to create</param>
        /// <returns>The scheduled transaction was successfully created</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ScheduledTransactionResponse> CreateScheduledTransactionAsync(string budget_id, PostScheduledTransactionWrapper body, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/scheduled_transactions"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scheduled_transactions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduledTransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The request could not be understood due to malformed syntax or validation error(s).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Single scheduled transaction
        /// </summary>
        /// <remarks>
        /// Returns a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <returns>The requested Scheduled Transaction</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ScheduledTransactionResponse> GetScheduledTransactionByIdAsync(string budget_id, string scheduled_transaction_id)
        {
            return GetScheduledTransactionByIdAsync(budget_id, scheduled_transaction_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single scheduled transaction
        /// </summary>
        /// <remarks>
        /// Returns a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <returns>The requested Scheduled Transaction</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ScheduledTransactionResponse> GetScheduledTransactionByIdAsync(string budget_id, string scheduled_transaction_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (scheduled_transaction_id == null)
                throw new System.ArgumentNullException("scheduled_transaction_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scheduled_transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(scheduled_transaction_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduledTransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The scheduled transaction was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("An error occurred", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates an existing scheduled transaction
        /// </summary>
        /// <remarks>
        /// Updates a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <param name="body">The scheduled transaction to update</param>
        /// <returns>The scheduled transaction was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ScheduledTransactionResponse> UpdateScheduledTransactionAsync(string budget_id, string scheduled_transaction_id, PutScheduledTransactionWrapper body)
        {
            return UpdateScheduledTransactionAsync(budget_id, scheduled_transaction_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an existing scheduled transaction
        /// </summary>
        /// <remarks>
        /// Updates a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <param name="body">The scheduled transaction to update</param>
        /// <returns>The scheduled transaction was successfully updated</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ScheduledTransactionResponse> UpdateScheduledTransactionAsync(string budget_id, string scheduled_transaction_id, PutScheduledTransactionWrapper body, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (scheduled_transaction_id == null)
                throw new System.ArgumentNullException("scheduled_transaction_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scheduled_transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(scheduled_transaction_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduledTransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The request could not be understood due to malformed syntax or validation error(s)", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an existing scheduled transaction
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <returns>The scheduled transaction was successfully deleted</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ScheduledTransactionResponse> DeleteScheduledTransactionAsync(string budget_id, string scheduled_transaction_id)
        {
            return DeleteScheduledTransactionAsync(budget_id, scheduled_transaction_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an existing scheduled transaction
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <returns>The scheduled transaction was successfully deleted</returns>
        /// <exception cref="YnabApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ScheduledTransactionResponse> DeleteScheduledTransactionAsync(string budget_id, string scheduled_transaction_id, System.Threading.CancellationToken cancellationToken)
        {
            if (budget_id == null)
                throw new System.ArgumentNullException("budget_id");

            if (scheduled_transaction_id == null)
                throw new System.ArgumentNullException("scheduled_transaction_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}"
                    urlBuilder_.Append("budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budget_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scheduled_transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(scheduled_transaction_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduledTransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new YnabApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new YnabApiException<ErrorResponse>("The scheduled transaction was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new YnabApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new YnabApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new YnabApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.ComponentModel.DataAnnotations.Required]
        public ErrorDetail Error { get; set; } = new ErrorDetail();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data Data { get; set; } = new Data();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The date format setting for the budget.  In some cases the format will not be available and will be specified as null.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateFormat
    {

        [System.Text.Json.Serialization.JsonPropertyName("format")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Format { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyFormat
    {

        [System.Text.Json.Serialization.JsonPropertyName("iso_code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Iso_code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("example_format")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Example_format { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("decimal_digits")]
        public int Decimal_digits { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("decimal_separator")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Decimal_separator { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbol_first")]
        public bool Symbol_first { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("group_separator")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Group_separator { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency_symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency_symbol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("display_symbol")]
        public bool Display_symbol { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetSummaryResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data2 Data { get; set; } = new Data2();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetSummary
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// The last time any changes were made to the budget from either a web or mobile client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_modified_on")]
        public System.DateTimeOffset Last_modified_on { get; set; } = default!;

        /// <summary>
        /// The earliest budget month
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first_month")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset First_month { get; set; } = default!;

        /// <summary>
        /// The latest budget month
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_month")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Last_month { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("date_format")]
        public DateFormat? Date_format { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency_format")]
        public CurrencyFormat? Currency_format { get; set; } = default!;

        /// <summary>
        /// The budget accounts (only included if `include_accounts=true` specified as query parameter)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accounts")]
        public System.Collections.Generic.ICollection<Account> Accounts { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetDetailResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data3 Data { get; set; } = new Data3();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetDetail : BudgetSummary
    {

        [System.Text.Json.Serialization.JsonPropertyName("accounts")]
        public System.Collections.Generic.ICollection<Account> Accounts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payees")]
        public System.Collections.Generic.ICollection<Payee> Payees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payee_locations")]
        public System.Collections.Generic.ICollection<PayeeLocation> Payee_locations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category_groups")]
        public System.Collections.Generic.ICollection<CategoryGroup> Category_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("categories")]
        public System.Collections.Generic.ICollection<Category> Categories { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("months")]
        public System.Collections.Generic.ICollection<MonthDetail> Months { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<TransactionSummary> Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subtransactions")]
        public System.Collections.Generic.ICollection<SubTransaction> Subtransactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scheduled_transactions")]
        public System.Collections.Generic.ICollection<ScheduledTransactionSummary> Scheduled_transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scheduled_subtransactions")]
        public System.Collections.Generic.ICollection<ScheduledSubTransaction> Scheduled_subtransactions { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetSettingsResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data4 Data { get; set; } = new Data4();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetSettings
    {

        [System.Text.Json.Serialization.JsonPropertyName("date_format")]
        public DateFormat? Date_format { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency_format")]
        public CurrencyFormat? Currency_format { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountsResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data5 Data { get; set; } = new Data5();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data6 Data { get; set; } = new Data6();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Account
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccountType Type { get; set; } = default!;

        /// <summary>
        /// Whether this account is on budget or not
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("on_budget")]
        public bool On_budget { get; set; } = default!;

        /// <summary>
        /// Whether this account is closed or not
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closed")]
        public bool Closed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// The current balance of the account in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public long Balance { get; set; } = default!;

        /// <summary>
        /// The current cleared balance of the account in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cleared_balance")]
        public long Cleared_balance { get; set; } = default!;

        /// <summary>
        /// The current uncleared balance of the account in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uncleared_balance")]
        public long Uncleared_balance { get; set; } = default!;

        /// <summary>
        /// The payee id which should be used when transferring to this account
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transfer_payee_id")]
        public System.Guid? Transfer_payee_id { get; set; } = default!;

        /// <summary>
        /// Whether or not the account is linked to a financial institution for automatic transaction import.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("direct_import_linked")]
        public bool Direct_import_linked { get; set; } = default!;

        /// <summary>
        /// If an account linked to a financial institution (direct_import_linked=true) and the linked connection is not in a healthy state, this will be true.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("direct_import_in_error")]
        public bool Direct_import_in_error { get; set; } = default!;

        /// <summary>
        /// A date/time specifying when the account was last reconciled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_reconciled_at")]
        public System.DateTimeOffset? Last_reconciled_at { get; set; } = default!;

        /// <summary>
        /// The original debt/loan account balance, specified in milliunits format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("debt_original_balance")]
        public long? Debt_original_balance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("debt_interest_rates")]
        public LoanAccountPeriodicValue? Debt_interest_rates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("debt_minimum_payments")]
        public LoanAccountPeriodicValue? Debt_minimum_payments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("debt_escrow_amounts")]
        public LoanAccountPeriodicValue? Debt_escrow_amounts { get; set; } = default!;

        /// <summary>
        /// Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostAccountWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("account")]
        [System.ComponentModel.DataAnnotations.Required]
        public SaveAccount Account { get; set; } = new SaveAccount();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaveAccount
    {
        /// <summary>
        /// The name of the account
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccountType Type { get; set; } = default!;

        /// <summary>
        /// The current balance of the account in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public long Balance { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanAccountPeriodicValue : System.Collections.Generic.Dictionary<string, long>
    {

    }

    /// <summary>
    /// The type of account
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"checking")]
        Checking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"savings")]
        Savings = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"cash")]
        Cash = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"creditCard")]
        CreditCard = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"lineOfCredit")]
        LineOfCredit = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"otherAsset")]
        OtherAsset = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"otherLiability")]
        OtherLiability = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"mortgage")]
        Mortgage = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"autoLoan")]
        AutoLoan = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"studentLoan")]
        StudentLoan = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"personalLoan")]
        PersonalLoan = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"medicalDebt")]
        MedicalDebt = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"otherDebt")]
        OtherDebt = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoriesResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data7 Data { get; set; } = new Data7();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data8 Data { get; set; } = new Data8();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryGroupWithCategories : CategoryGroup
    {
        /// <summary>
        /// Category group categories.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("categories")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Category> Categories { get; set; } = new System.Collections.Generic.List<Category>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryGroup
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Whether or not the category group is hidden
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hidden")]
        public bool Hidden { get; set; } = default!;

        /// <summary>
        /// Whether or not the category group has been deleted.  Deleted category groups will only be included in delta requests.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Category
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category_group_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Category_group_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category_group_name")]
        public string Category_group_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Whether or not the category is hidden
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hidden")]
        public bool Hidden { get; set; } = default!;

        /// <summary>
        /// DEPRECATED: No longer used.  Value will always be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("original_category_group_id")]
        public System.Guid? Original_category_group_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// Budgeted amount in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("budgeted")]
        public long Budgeted { get; set; } = default!;

        /// <summary>
        /// Activity amount in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activity")]
        public long Activity { get; set; } = default!;

        /// <summary>
        /// Balance in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public long Balance { get; set; } = default!;

        /// <summary>
        /// The type of goal, if the category has a goal (TB='Target Category Balance', TBD='Target Category Balance by Date', MF='Monthly Funding', NEED='Plan Your Spending')
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CategoryGoal_type? Goal_type { get; set; } = default!;

        /// <summary>
        /// Indicates the monthly rollover behavior for "NEED"-type goals. When "true", the goal will always ask for the target amount in the new month ("Set Aside"). When "false", previous month category funding is used ("Refill"). For other goal types, this field will be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_needs_whole_amount")]
        public bool? Goal_needs_whole_amount { get; set; } = default!;

        /// <summary>
        /// A day offset modifier for the goal's due date. When goal_cadence is 2 (Weekly), this value specifies which day of the week the goal is due (0 = Sunday, 6 = Saturday). Otherwise, this value specifies which day of the month the goal is due (1 = 1st, 31 = 31st, null = Last day of Month).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_day")]
        public int? Goal_day { get; set; } = default!;

        /// <summary>
        /// The goal cadence. Value in range 0-14. There are two subsets of these values which behave differently. For values 0, 1, 2, and 13, the goal's due date repeats every goal_cadence * goal_cadence_frequency, where 0 = None, 1 = Monthly, 2 = Weekly, and 13 = Yearly. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month. For values 3-12 and 14, goal_cadence_frequency is ignored and the goal's due date repeats every goal_cadence, where 3 = Every 2 Months, 4 = Every 3 Months, ..., 12 = Every 11 Months, and 14 = Every 2 Years.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_cadence")]
        public int? Goal_cadence { get; set; } = default!;

        /// <summary>
        /// The goal cadence frequency. When goal_cadence is 0, 1, 2, or 13, a goal's due date repeats every goal_cadence * goal_cadence_frequency. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month.  When goal_cadence is 3-12 or 14, goal_cadence_frequency is ignored.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_cadence_frequency")]
        public int? Goal_cadence_frequency { get; set; } = default!;

        /// <summary>
        /// The month a goal was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_creation_month")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Goal_creation_month { get; set; } = default!;

        /// <summary>
        /// The goal target amount in milliunits
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_target")]
        public long? Goal_target { get; set; } = default!;

        /// <summary>
        /// The original target month for the goal to be completed.  Only some goal types specify this date.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_target_month")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Goal_target_month { get; set; } = default!;

        /// <summary>
        /// The percentage completion of the goal
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_percentage_complete")]
        public int? Goal_percentage_complete { get; set; } = default!;

        /// <summary>
        /// The number of months, including the current month, left in the current goal period.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_months_to_budget")]
        public int? Goal_months_to_budget { get; set; } = default!;

        /// <summary>
        /// The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period. This amount will generally correspond to the 'Underfunded' amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_under_funded")]
        public long? Goal_under_funded { get; set; } = default!;

        /// <summary>
        /// The total amount funded towards the goal within the current goal period.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_overall_funded")]
        public long? Goal_overall_funded { get; set; } = default!;

        /// <summary>
        /// The amount of funding still needed to complete the goal within the current goal period.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_overall_left")]
        public long? Goal_overall_left { get; set; } = default!;

        /// <summary>
        /// Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaveCategoryResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data9 Data { get; set; } = new Data9();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeesResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data10 Data { get; set; } = new Data10();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data11 Data { get; set; } = new Data11();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavePayeeResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data12 Data { get; set; } = new Data12();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payee
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// If a transfer payee, the `account_id` to which this payee transfers to
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transfer_account_id")]
        public string? Transfer_account_id { get; set; } = default!;

        /// <summary>
        /// Whether or not the payee has been deleted.  Deleted payees will only be included in delta requests.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeLocationsResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data13 Data { get; set; } = new Data13();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeLocationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data14 Data { get; set; } = new Data14();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeLocation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payee_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Payee_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Latitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Longitude { get; set; } = default!;

        /// <summary>
        /// Whether or not the payee location has been deleted.  Deleted payee locations will only be included in delta requests.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionsResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data15 Data { get; set; } = new Data15();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HybridTransactionsResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data16 Data { get; set; } = new Data16();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTransactionWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public ExistingTransaction Transaction { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostTransactionsWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        public NewTransaction Transaction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<NewTransaction> Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchTransactionsWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SaveTransactionWithIdOrImportId> Transactions { get; set; } = new System.Collections.Generic.List<SaveTransactionWithIdOrImportId>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExistingTransaction : SaveTransactionWithOptionalFields
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewTransaction : SaveTransactionWithOptionalFields
    {
        /// <summary>
        /// If specified, a new transaction will be assigned this `import_id` and considered "imported".  We will also attempt to match this imported transaction to an existing "user-entered" transaction on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.&lt;br&gt;&lt;br&gt;Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.&lt;br&gt;&lt;br&gt;If import_id is omitted or specified as null, the transaction will be treated as a "user-entered" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("import_id")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? Import_id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaveTransactionWithIdOrImportId : SaveTransactionWithOptionalFields
    {
        /// <summary>
        /// If specified, this id will be used to lookup a transaction by its `id` for the purpose of updating the transaction itself. If not specified, an `import_id` should be supplied.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// If specified, this id will be used to lookup a transaction by its `import_id` for the purpose of updating the transaction itself. If not specified, an `id` should be supplied.  You may not provide both an `id` and an `import_id` and updating an `import_id` on an existing transaction is not allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("import_id")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? Import_id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaveTransactionWithOptionalFields
    {

        [System.Text.Json.Serialization.JsonPropertyName("account_id")]
        public System.Guid Account_id { get; set; } = default!;

        /// <summary>
        /// The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; } = default!;

        /// <summary>
        /// The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public long Amount { get; set; } = default!;

        /// <summary>
        /// The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `transfer_payee_id` on the account resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payee_id")]
        public System.Guid? Payee_id { get; set; } = default!;

        /// <summary>
        /// The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payee_name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Payee_name { get; set; } = default!;

        /// <summary>
        /// The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category_id")]
        public System.Guid? Category_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? Memo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cleared")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TransactionClearedStatus Cleared { get; set; } = default!;

        /// <summary>
        /// Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approved")]
        public bool Approved { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flag_color")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TransactionFlagColor? Flag_color { get; set; } = default!;

        /// <summary>
        /// An array of subtransactions to configure a transaction as a split. Updating `subtransactions` on an existing split transaction is not supported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtransactions")]
        public System.Collections.Generic.ICollection<SaveSubTransaction> Subtransactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaveSubTransaction
    {
        /// <summary>
        /// The subtransaction amount in milliunits format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public long Amount { get; set; } = default!;

        /// <summary>
        /// The payee for the subtransaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payee_id")]
        public System.Guid? Payee_id { get; set; } = default!;

        /// <summary>
        /// The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified on parent transaction) or (2) a payee with the same name or (3) creation of a new payee.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payee_name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Payee_name { get; set; } = default!;

        /// <summary>
        /// The category for the subtransaction.  Credit Card Payment categories are not permitted and will be ignored if supplied.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category_id")]
        public System.Guid? Category_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? Memo { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaveTransactionsResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data17 Data { get; set; } = new Data17();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data18 Data { get; set; } = new Data18();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionSummary
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// The transaction date in ISO format (e.g. 2016-12-01)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; } = default!;

        /// <summary>
        /// The transaction amount in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public long Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        public string? Memo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cleared")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TransactionClearedStatus Cleared { get; set; } = default!;

        /// <summary>
        /// Whether or not the transaction is approved
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approved")]
        public bool Approved { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flag_color")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TransactionFlagColor? Flag_color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flag_name")]
        public string? Flag_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("account_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Account_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payee_id")]
        public System.Guid? Payee_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category_id")]
        public System.Guid? Category_id { get; set; } = default!;

        /// <summary>
        /// If a transfer transaction, the account to which it transfers
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transfer_account_id")]
        public System.Guid? Transfer_account_id { get; set; } = default!;

        /// <summary>
        /// If a transfer transaction, the id of transaction on the other side of the transfer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transfer_transaction_id")]
        public string? Transfer_transaction_id { get; set; } = default!;

        /// <summary>
        /// If transaction is matched, the id of the matched transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("matched_transaction_id")]
        public string? Matched_transaction_id { get; set; } = default!;

        /// <summary>
        /// If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("import_id")]
        public string? Import_id { get; set; } = default!;

        /// <summary>
        /// If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("import_payee_name")]
        public string? Import_payee_name { get; set; } = default!;

        /// <summary>
        /// If the transaction was imported, the original payee name as it appeared on the statement
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("import_payee_name_original")]
        public string? Import_payee_name_original { get; set; } = default!;

        /// <summary>
        /// If the transaction is a debt/loan account transaction, the type of transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("debt_transaction_type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TransactionSummaryDebt_transaction_type? Debt_transaction_type { get; set; } = default!;

        /// <summary>
        /// Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionDetail : TransactionSummary
    {

        [System.Text.Json.Serialization.JsonPropertyName("account_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Account_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payee_name")]
        public string? Payee_name { get; set; } = default!;

        /// <summary>
        /// The name of the category.  If a split transaction, this will be 'Split'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category_name")]
        public string? Category_name { get; set; } = default!;

        /// <summary>
        /// If a split transaction, the subtransactions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtransactions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SubTransaction> Subtransactions { get; set; } = new System.Collections.Generic.List<SubTransaction>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HybridTransaction : TransactionSummary
    {
        /// <summary>
        /// Whether the hybrid transaction represents a regular transaction or a subtransaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HybridTransactionType Type { get; set; } = default!;

        /// <summary>
        /// For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parent_transaction_id")]
        public string? Parent_transaction_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("account_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Account_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payee_name")]
        public string? Payee_name { get; set; } = default!;

        /// <summary>
        /// The name of the category.  If a split transaction, this will be 'Split'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category_name")]
        public string Category_name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchPayeeWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("payee")]
        [System.ComponentModel.DataAnnotations.Required]
        public SavePayee Payee { get; set; } = new SavePayee();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavePayee
    {
        /// <summary>
        /// The name of the payee. The name must be a maximum of 500 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchCategoryWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public SaveCategory Category { get; set; } = new SaveCategory();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaveCategory
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category_group_id")]
        public System.Guid Category_group_id { get; set; } = default!;

        /// <summary>
        /// The goal target amount in milliunits format.  This amount can only be changed if the category already has a configured goal (goal_type != null).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("goal_target")]
        public long? Goal_target { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchMonthCategoryWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public SaveMonthCategory Category { get; set; } = new SaveMonthCategory();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaveMonthCategory
    {
        /// <summary>
        /// Budgeted amount in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("budgeted")]
        public long Budgeted { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionsImportResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data19 Data { get; set; } = new Data19();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data20 Data { get; set; } = new Data20();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkTransactions
    {

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SaveTransactionWithOptionalFields> Transactions { get; set; } = new System.Collections.Generic.List<SaveTransactionWithOptionalFields>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubTransaction
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transaction_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction_id { get; set; } = default!;

        /// <summary>
        /// The subtransaction amount in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public long Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        public string? Memo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payee_id")]
        public System.Guid? Payee_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payee_name")]
        public string? Payee_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category_id")]
        public System.Guid? Category_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category_name")]
        public string? Category_name { get; set; } = default!;

        /// <summary>
        /// If a transfer, the account_id which the subtransaction transfers to
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transfer_account_id")]
        public System.Guid? Transfer_account_id { get; set; } = default!;

        /// <summary>
        /// If a transfer, the id of transaction on the other side of the transfer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transfer_transaction_id")]
        public string? Transfer_transaction_id { get; set; } = default!;

        /// <summary>
        /// Whether or not the subtransaction has been deleted.  Deleted subtransactions will only be included in delta requests.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduledTransactionsResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data21 Data { get; set; } = new Data21();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduledTransactionResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data22 Data { get; set; } = new Data22();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutScheduledTransactionWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("scheduled_transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public SaveScheduledTransaction Scheduled_transaction { get; set; } = new SaveScheduledTransaction();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostScheduledTransactionWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("scheduled_transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public SaveScheduledTransaction Scheduled_transaction { get; set; } = new SaveScheduledTransaction();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaveScheduledTransaction
    {

        [System.Text.Json.Serialization.JsonPropertyName("account_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Account_id { get; set; } = default!;

        /// <summary>
        /// The scheduled transaction date in ISO format (e.g. 2016-12-01).  This should be a future date no more than 5 years into the future.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; } = default!;

        /// <summary>
        /// The scheduled transaction amount in milliunits format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public long Amount { get; set; } = default!;

        /// <summary>
        /// The payee for the scheduled transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `transfer_payee_id` on the account resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payee_id")]
        public System.Guid? Payee_id { get; set; } = default!;

        /// <summary>
        /// The payee name for the the scheduled transaction.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a payee with the same name or (2) creation of a new payee.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payee_name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Payee_name { get; set; } = default!;

        /// <summary>
        /// The category for the scheduled transaction. Credit Card Payment categories are not permitted. Creating a split scheduled transaction is not currently supported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category_id")]
        public System.Guid? Category_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? Memo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flag_color")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TransactionFlagColor? Flag_color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ScheduledTransactionFrequency Frequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduledTransactionSummary
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// The first date for which the Scheduled Transaction was scheduled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date_first")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_first { get; set; } = default!;

        /// <summary>
        /// The next date for which the Scheduled Transaction is scheduled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date_next")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ScheduledTransactionSummaryFrequency Frequency { get; set; } = default!;

        /// <summary>
        /// The scheduled transaction amount in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public long Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        public string? Memo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flag_color")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TransactionFlagColor? Flag_color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flag_name")]
        public string? Flag_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("account_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Account_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payee_id")]
        public System.Guid? Payee_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category_id")]
        public System.Guid? Category_id { get; set; } = default!;

        /// <summary>
        /// If a transfer, the account_id which the scheduled transaction transfers to
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transfer_account_id")]
        public System.Guid? Transfer_account_id { get; set; } = default!;

        /// <summary>
        /// Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduledTransactionDetail : ScheduledTransactionSummary
    {

        [System.Text.Json.Serialization.JsonPropertyName("account_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Account_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payee_name")]
        public string? Payee_name { get; set; } = default!;

        /// <summary>
        /// The name of the category.  If a split scheduled transaction, this will be 'Split'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category_name")]
        public string? Category_name { get; set; } = default!;

        /// <summary>
        /// If a split scheduled transaction, the subtransactions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtransactions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ScheduledSubTransaction> Subtransactions { get; set; } = new System.Collections.Generic.List<ScheduledSubTransaction>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduledSubTransaction
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scheduled_transaction_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Scheduled_transaction_id { get; set; } = default!;

        /// <summary>
        /// The scheduled subtransaction amount in milliunits format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public long Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        public string? Memo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payee_id")]
        public System.Guid? Payee_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payee_name")]
        public string? Payee_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category_id")]
        public System.Guid? Category_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category_name")]
        public string? Category_name { get; set; } = default!;

        /// <summary>
        /// If a transfer, the account_id which the scheduled subtransaction transfers to
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transfer_account_id")]
        public System.Guid? Transfer_account_id { get; set; } = default!;

        /// <summary>
        /// Whether or not the scheduled subtransaction has been deleted. Deleted scheduled subtransactions will only be included in delta requests.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonthSummariesResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data23 Data { get; set; } = new Data23();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonthDetailResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data24 Data { get; set; } = new Data24();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonthSummary
    {

        [System.Text.Json.Serialization.JsonPropertyName("month")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Month { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// The total amount of transactions categorized to 'Inflow: Ready to Assign' in the month
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("income")]
        public long Income { get; set; } = default!;

        /// <summary>
        /// The total amount budgeted in the month
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("budgeted")]
        public long Budgeted { get; set; } = default!;

        /// <summary>
        /// The total amount of transactions in the month, excluding those categorized to 'Inflow: Ready to Assign'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activity")]
        public long Activity { get; set; } = default!;

        /// <summary>
        /// The available amount for 'Ready to Assign'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("to_be_budgeted")]
        public long To_be_budgeted { get; set; } = default!;

        /// <summary>
        /// The Age of Money as of the month
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("age_of_money")]
        public int? Age_of_money { get; set; } = default!;

        /// <summary>
        /// Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonthDetail : MonthSummary
    {
        /// <summary>
        /// The budget month categories.  Amounts (budgeted, activity, balance, etc.) are specific to the {month} parameter specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("categories")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Category> Categories { get; set; } = new System.Collections.Generic.List<Category>();

    }

    /// <summary>
    /// The transaction flag
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionFlagColor
    {

        [System.Runtime.Serialization.EnumMember(Value = @"red")]
        Red = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"orange")]
        Orange = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"yellow")]
        Yellow = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"green")]
        Green = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"blue")]
        Blue = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"purple")]
        Purple = 5,

    }

    /// <summary>
    /// The cleared status of the transaction
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionClearedStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"cleared")]
        Cleared = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"uncleared")]
        Uncleared = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"reconciled")]
        Reconciled = 2,

    }

    /// <summary>
    /// The scheduled transaction frequency
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScheduledTransactionFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"never")]
        Never = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"daily")]
        Daily = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"weekly")]
        Weekly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"everyOtherWeek")]
        EveryOtherWeek = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"twiceAMonth")]
        TwiceAMonth = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"every4Weeks")]
        Every4Weeks = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"everyOtherMonth")]
        EveryOtherMonth = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"every3Months")]
        Every3Months = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"every4Months")]
        Every4Months = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"twiceAYear")]
        TwiceAYear = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"yearly")]
        Yearly = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"everyOtherYear")]
        EveryOtherYear = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"uncategorized")]
        Uncategorized = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unapproved")]
        Unapproved = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"uncategorized")]
        Uncategorized = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unapproved")]
        Unapproved = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"uncategorized")]
        Uncategorized = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unapproved")]
        Unapproved = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"uncategorized")]
        Uncategorized = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unapproved")]
        Unapproved = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"uncategorized")]
        Uncategorized = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unapproved")]
        Unapproved = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data
    {

        [System.Text.Json.Serialization.JsonPropertyName("user")]
        [System.ComponentModel.DataAnnotations.Required]
        public User User { get; set; } = new User();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data2
    {

        [System.Text.Json.Serialization.JsonPropertyName("budgets")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BudgetSummary> Budgets { get; set; } = new System.Collections.Generic.List<BudgetSummary>();

        [System.Text.Json.Serialization.JsonPropertyName("default_budget")]
        public BudgetSummary Default_budget { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data3
    {

        [System.Text.Json.Serialization.JsonPropertyName("budget")]
        [System.ComponentModel.DataAnnotations.Required]
        public BudgetDetail Budget { get; set; } = default!;

        /// <summary>
        /// The knowledge of the server
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server_knowledge")]
        public long Server_knowledge { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data4
    {

        [System.Text.Json.Serialization.JsonPropertyName("settings")]
        [System.ComponentModel.DataAnnotations.Required]
        public BudgetSettings Settings { get; set; } = new BudgetSettings();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data5
    {

        [System.Text.Json.Serialization.JsonPropertyName("accounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Account> Accounts { get; set; } = new System.Collections.Generic.List<Account>();

        /// <summary>
        /// The knowledge of the server
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server_knowledge")]
        public long Server_knowledge { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data6
    {

        [System.Text.Json.Serialization.JsonPropertyName("account")]
        [System.ComponentModel.DataAnnotations.Required]
        public Account Account { get; set; } = new Account();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data7
    {

        [System.Text.Json.Serialization.JsonPropertyName("category_groups")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CategoryGroupWithCategories> Category_groups { get; set; } = new System.Collections.Generic.List<CategoryGroupWithCategories>();

        /// <summary>
        /// The knowledge of the server
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server_knowledge")]
        public long Server_knowledge { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data8
    {

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public Category Category { get; set; } = new Category();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CategoryGoal_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TB")]
        TB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TBD")]
        TBD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NEED")]
        NEED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBT")]
        DEBT = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data9
    {

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public Category Category { get; set; } = new Category();

        /// <summary>
        /// The knowledge of the server
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server_knowledge")]
        public long Server_knowledge { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data10
    {

        [System.Text.Json.Serialization.JsonPropertyName("payees")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Payee> Payees { get; set; } = new System.Collections.Generic.List<Payee>();

        /// <summary>
        /// The knowledge of the server
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server_knowledge")]
        public long Server_knowledge { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data11
    {

        [System.Text.Json.Serialization.JsonPropertyName("payee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payee Payee { get; set; } = new Payee();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data12
    {

        [System.Text.Json.Serialization.JsonPropertyName("payee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payee Payee { get; set; } = new Payee();

        /// <summary>
        /// The knowledge of the server
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server_knowledge")]
        public long Server_knowledge { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data13
    {

        [System.Text.Json.Serialization.JsonPropertyName("payee_locations")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PayeeLocation> Payee_locations { get; set; } = new System.Collections.Generic.List<PayeeLocation>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data14
    {

        [System.Text.Json.Serialization.JsonPropertyName("payee_location")]
        [System.ComponentModel.DataAnnotations.Required]
        public PayeeLocation Payee_location { get; set; } = new PayeeLocation();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data15
    {

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransactionDetail> Transactions { get; set; } = new System.Collections.Generic.List<TransactionDetail>();

        /// <summary>
        /// The knowledge of the server
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server_knowledge")]
        public long Server_knowledge { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data16
    {

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HybridTransaction> Transactions { get; set; } = new System.Collections.Generic.List<HybridTransaction>();

        /// <summary>
        /// The knowledge of the server
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server_knowledge")]
        public long Server_knowledge { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data17
    {
        /// <summary>
        /// The transaction ids that were saved
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction_ids")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Transaction_ids { get; set; } = new System.Collections.Generic.List<string>();

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        public TransactionDetail Transaction { get; set; } = default!;

        /// <summary>
        /// If multiple transactions were specified, the transactions that were saved
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<TransactionDetail> Transactions { get; set; } = default!;

        /// <summary>
        /// If multiple transactions were specified, a list of import_ids that were not created because of an existing `import_id` found on the same account
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duplicate_import_ids")]
        public System.Collections.Generic.ICollection<string> Duplicate_import_ids { get; set; } = default!;

        /// <summary>
        /// The knowledge of the server
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server_knowledge")]
        public long Server_knowledge { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data18
    {

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public TransactionDetail Transaction { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionSummaryDebt_transaction_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"payment")]
        Payment = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"refund")]
        Refund = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fee")]
        Fee = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"interest")]
        Interest = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"escrow")]
        Escrow = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"balanceAdjustment")]
        BalanceAdjustment = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"credit")]
        Credit = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"charge")]
        Charge = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HybridTransactionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"transaction")]
        Transaction = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"subtransaction")]
        Subtransaction = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data19
    {
        /// <summary>
        /// The list of transaction ids that were imported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction_ids")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Transaction_ids { get; set; } = new System.Collections.Generic.List<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data20
    {

        [System.Text.Json.Serialization.JsonPropertyName("bulk")]
        [System.ComponentModel.DataAnnotations.Required]
        public Bulk Bulk { get; set; } = new Bulk();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data21
    {

        [System.Text.Json.Serialization.JsonPropertyName("scheduled_transactions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ScheduledTransactionDetail> Scheduled_transactions { get; set; } = new System.Collections.Generic.List<ScheduledTransactionDetail>();

        /// <summary>
        /// The knowledge of the server
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server_knowledge")]
        public long Server_knowledge { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data22
    {

        [System.Text.Json.Serialization.JsonPropertyName("scheduled_transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public ScheduledTransactionDetail Scheduled_transaction { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScheduledTransactionSummaryFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"never")]
        Never = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"daily")]
        Daily = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"weekly")]
        Weekly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"everyOtherWeek")]
        EveryOtherWeek = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"twiceAMonth")]
        TwiceAMonth = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"every4Weeks")]
        Every4Weeks = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"everyOtherMonth")]
        EveryOtherMonth = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"every3Months")]
        Every3Months = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"every4Months")]
        Every4Months = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"twiceAYear")]
        TwiceAYear = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"yearly")]
        Yearly = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"everyOtherYear")]
        EveryOtherYear = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data23
    {

        [System.Text.Json.Serialization.JsonPropertyName("months")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MonthSummary> Months { get; set; } = new System.Collections.Generic.List<MonthSummary>();

        /// <summary>
        /// The knowledge of the server
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server_knowledge")]
        public long Server_knowledge { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data24
    {

        [System.Text.Json.Serialization.JsonPropertyName("month")]
        [System.ComponentModel.DataAnnotations.Required]
        public MonthDetail Month { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk
    {
        /// <summary>
        /// The list of Transaction ids that were created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction_ids")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Transaction_ids { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// If any Transactions were not created because they had an `import_id` matching a transaction already on the same account, the specified import_id(s) will be included in this list.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duplicate_import_ids")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Duplicate_import_ids { get; set; } = new System.Collections.Generic.List<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YnabApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public YnabApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YnabApiException<TResult> : YnabApiException
    {
        public TResult Result { get; private set; }

        public YnabApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625